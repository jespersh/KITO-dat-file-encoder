using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Net.NetworkInformation;
using System.Net;
using System.Net.Sockets;

namespace IT_XOR7
{
    public partial class Form1 : Form
    {
        private int tlines = 0;
        private static string _ip;
        public Form1()
        {
            InitializeComponent();
            this.label1.Text = "";
            readKey();
        }


        private void readKey()
        {
            string filename = @"xorkey.txt";
            if (File.Exists(filename))
            {
                StreamReader sr = new StreamReader("xorkey.txt");
                string line = sr.ReadLine();
                sr.Close();
                this.keyBox.Text = line;
            }
            else
            {
                this.keyBox.Text = this.textBox1.Text;
            }
        }

        private void button2_Click(object sender, EventArgs e)
        {
            string filename = @"xorkey.txt";
            StreamWriter sw = new StreamWriter(filename);
            sw.WriteLine(this.keyBox.Text);
            sw.Close();
        }

        private void InputFileButton_Click(object sender, EventArgs e)
        {
            this.openFileDialog1.ShowDialog();
        }

        private void OutputFileButton_Click(object sender, EventArgs e)
        {
            this.saveFileDialog1.ShowDialog();
        }

        private void DoTheMap_Click(object sender, EventArgs e)
        {
            if (this.saveFileDialog1.FileName == "" || this.openFileDialog1.FileName == "")
                return;
            this.DoTheMap.Enabled = false;
            this.label1.Text = "WORKING";
            this.DoTheMap.Text = "WORKING";
            this.tlines = 0;
            StreamReader sc = new StreamReader(this.openFileDialog1.FileName);
            while (sc.Peek() >= 0)
            {
                sc.ReadLine();
                tlines++;
            }
            sc.Close();
            this.tLineBox.Text = tlines.ToString();
            backgroundWorker1.RunWorkerAsync();
        }

        private void saveFileDialog1_FileOk(object sender, CancelEventArgs e)
        {
            this.OutputFileTextBox.Text = this.saveFileDialog1.FileName;
            string extension = Path.GetExtension(this.saveFileDialog1.FileName);
            if (extension.ToLower() == ".dat")
                this.checkBox1.Checked = true;
            else
                this.checkBox1.Checked = false;
        }

        private void openFileDialog1_FileOk(object sender, CancelEventArgs e)
        {
            this.InputFileTextBox.Text = this.openFileDialog1.FileName;
        }

        private void backgroundWorker1_DoWork(object sender, DoWorkEventArgs e)
        {
            BackgroundWorker worker = sender as BackgroundWorker;
            string kString = this.keyBox.Text;
            bool isArray = false;
            int aPos = 0;
            int aLng = 0;
            int[] aArr = new int[50];
            if (kString.IndexOfAny(",".ToCharArray()) != -1)
            {
                isArray = true;
                string [] sArr = kString.Split(",".ToCharArray());
                aArr = sArr.Select(x => int.Parse(x)).ToArray();
                aLng = aArr.Length;
            }
            double result = 0.0;
            string pp;
            char tC;
            bool cs = this.checkBox1.Checked;
            bool preSum = this.checkBox2.Checked;
            char[,] keyHash = new char[25500,255];
            MathText.ReversePolishNotation rpn = new MathText.ReversePolishNotation();
            StreamReader sr = new StreamReader(this.openFileDialog1.FileName);
            StreamWriter sw = new StreamWriter(this.saveFileDialog1.FileName);
            int uline = 0;
            ulong checksum = 0;
            if (cs)
                sw.NewLine = "\n"; // this kind of newline for .dat files
            else
                sw.NewLine = "\r\n"; // this kind of newline for .txt files
            if (cs)
            {
                string line = "File generated by KITO";
                string output = "";
                for (int i = 0; i < (int)line.Length; i++)
                {
                    tC = line[i];
                    if (!preSum) checksum += (ulong)tC;
                    output += tC;
                    // Next part only used for checksum
                    if (preSum) // Reversed order of preSum
                    {
                        if (isArray)
                        {
                            result = aArr[aPos];
                            aPos++;
                            if (aPos == aLng)
                                aPos = 0;
                        }
                        else
                        {
                            pp = kString.Replace("i", i.ToString());
                            rpn.Parse(pp);
                            result = rpn.Evaluate();
                        }
                        tC ^= (char)result;
                        if ((int)tC > 126 || (int)tC < 32)
                            tC = line[i];
                        checksum += (ulong)tC;
                    }
                }
                aPos = 0;
                sw.WriteLine(output);
            }
            aPos = 0;
            char nullchar = (char)"\0"[0];
            bool nl = false;
            bool el = false;
            while (sr.Peek() >= 0)
            {
                string line = sr.ReadLine();
                nl = false;
                if (line == "File generated by KITO")
                    nl = true;
                if (line == "-------------------------")
                    el = true;
                string output = "";
                if (!nl && !el)
                {
                    for (int i = 0; i < (int)line.Length; i++)
                    {
                        tC = line[i];
                        if (cs && preSum) checksum += (ulong)tC;
                        if (keyHash[i, line[i]] != nullchar && !isArray)
                        {
                            tC = keyHash[i, tC];
                        }
                        else
                        {
                            if (isArray)
                            {
                                result = aArr[aPos];
                                aPos++;
                                if (aPos == aLng)
                                    aPos = 0;
                            }
                            else
                            {
                                pp = kString.Replace("i", i.ToString());
                                rpn.Parse(pp);
                                result = rpn.Evaluate();
                            }
                            tC ^= (char)result;
                            //tC ^= (char)(7 * ((int)i % 7 + 1));
                            if ((int)tC > 126 || (int)tC < 32)
                                tC = line[i];
                            keyHash[i, line[i]] = tC;
                        }
                        output += tC;
                        if (cs && !preSum) checksum += (ulong)tC;
                    }
                    aPos = 0;
                    sw.WriteLine(output);
                }
                uline++;
                backgroundWorker1.ReportProgress(0, uline.ToString());
            }
            aPos = 0;
            string checksumC = "";
            if (checksum != 0)
            {
                string line = "-------------------------";
                string output = "";
                for (int i = 0; i < (int)line.Length; i++)
                {
                    tC = line[i];
                    if (!preSum) checksum += (ulong)tC;
                    output += tC;
                    // Next part only used for checksum
                    if (preSum)
                    {
                        if (isArray)
                        {
                            result = aArr[aPos];
                            aPos++;
                            if (aPos == aLng)
                                aPos = 0;
                        }
                        else
                        {
                            pp = kString.Replace("i", i.ToString());
                            rpn.Parse(pp);
                            result = rpn.Evaluate();
                        }
                        tC ^= (char)result;
                        if ((int)tC > 126 || (int)tC < 32)
                            tC = line[i];
                        checksum += (ulong)tC;
                    }
                }
                aPos = 0;
                sw.WriteLine(output);
            }
            aPos = 0;
            if (checksum != 0)
            {
                for (int i = 0; i < (int)checksum.ToString().Length; i++)
                {
                    tC = (char)(checksum.ToString())[i];
                    if (isArray)
                    {
                        result = aArr[aPos];
                        aPos++;
                        if (aPos == aLng)
                            aPos = 0;
                    }
                    else
                    {
                        pp = kString.Replace("i", i.ToString());
                        rpn.Parse(pp);
                        result = rpn.Evaluate();
                    }
                    tC ^= (char)result;
                    //tC ^= (char)(7 * ((int)i % 7 + 1));
                    if ((int)tC > 126 || (int)tC < 32)
                        tC = (char)(checksum.ToString())[i];
                    checksumC += tC;
                }
                aPos = 0;
                sw.WriteLine(checksumC);
            }
            sr.Close();
            sw.Close();
        }

        private void backgroundWorker1_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            this.uLineBox.Text = (string)e.UserState;
        }

        private void backgroundWorker1_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {

            this.label1.Text = this.label1.Text + " DONE!";
            this.DoTheMap.Enabled = true;
            this.DoTheMap.Text = "DO IT";
        }

        private void button1_Click(object sender, EventArgs e)
        {
            string file1 = this.openFileDialog1.FileName;
            string file2 = this.saveFileDialog1.FileName;
            this.saveFileDialog1.FileName = file1;
            this.openFileDialog1.FileName = file2;
            this.OutputFileTextBox.Text = this.saveFileDialog1.FileName;
            this.InputFileTextBox.Text = this.openFileDialog1.FileName;
            string extension = Path.GetExtension(this.saveFileDialog1.FileName);
            if (extension.ToLower() == ".dat")
                this.checkBox1.Checked = true;
            else
                this.checkBox1.Checked = false;
        }
    }
}
